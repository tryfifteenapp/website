import { SupabasePlatform } from './platform/index.cjs';
import * as _modelcontextprotocol_sdk_server from '@modelcontextprotocol/sdk/server';
import { z } from 'zod';
import '@supabase/mcp-utils';

declare const currentFeatureGroupSchema: z.ZodEnum<["docs", "account", "database", "debugging", "development", "functions", "branching", "storage"]>;
declare const featureGroupSchema: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["debug"]>, z.ZodEnum<["docs", "account", "database", "debugging", "development", "functions", "branching", "storage"]>]>, "account" | "branching" | "database" | "storage" | "debugging" | "development" | "functions" | "docs", "account" | "branching" | "database" | "storage" | "debugging" | "development" | "functions" | "debug" | "docs">;
type FeatureGroup = z.infer<typeof featureGroupSchema>;

type SupabaseMcpServerOptions = {
    /**
     * Platform implementation for Supabase.
     */
    platform: SupabasePlatform;
    /**
     * The API URL for the Supabase Content API.
     */
    contentApiUrl?: string;
    /**
     * The project ID to scope the server to.
     *
     * If undefined, the server will have access
     * to all organizations and projects for the user.
     */
    projectId?: string;
    /**
     * Executes database queries in read-only mode if true.
     */
    readOnly?: boolean;
    /**
     * Features to enable.
     * Options: 'account', 'branching', 'database', 'debugging', 'development', 'docs', 'functions', 'storage'
     */
    features?: string[];
};
/**
 * Creates an MCP server for interacting with Supabase.
 */
declare function createSupabaseMcpServer(options: SupabaseMcpServerOptions): _modelcontextprotocol_sdk_server.Server<{
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
            progressToken?: string | number | undefined;
        } | undefined;
    } | undefined;
}, {
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
        } | undefined;
    } | undefined;
}, {
    [x: string]: unknown;
    _meta?: {
        [x: string]: unknown;
    } | undefined;
}>;

export { type FeatureGroup, type SupabaseMcpServerOptions, SupabasePlatform, createSupabaseMcpServer, currentFeatureGroupSchema, featureGroupSchema };
