{"version":3,"sources":["/Users/grichardson/Documents/dev/supabase/mcp-server-supabase/packages/mcp-server-supabase/dist/chunk-TTME4LEF.cjs","../src/platform/types.ts"],"names":["storageBucketSchema","z","storageConfigSchema","organizationSchema","projectSchema","branchSchema","edgeFunctionSchema","createProjectOptionsSchema","AWS_REGION_CODES","createBranchOptionsSchema","resetBranchOptionsSchema","deployEdgeFunctionOptionsSchema","executeSqlOptionsSchema","applyMigrationOptionsSchema","migrationSchema","getLogsOptionsSchema","generateTypescriptTypesResultSchema"],"mappings":"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","file":"/Users/grichardson/Documents/dev/supabase/mcp-server-supabase/packages/mcp-server-supabase/dist/chunk-TTME4LEF.cjs","sourcesContent":[null,"import type { InitData } from '@supabase/mcp-utils';\nimport { z } from 'zod';\nimport { AWS_REGION_CODES } from '../regions.js';\n\nexport const storageBucketSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  owner: z.string(),\n  created_at: z.string(),\n  updated_at: z.string(),\n  public: z.boolean(),\n});\n\nexport const storageConfigSchema = z.object({\n  fileSizeLimit: z.number(),\n  features: z.object({\n    imageTransformation: z.object({ enabled: z.boolean() }),\n    s3Protocol: z.object({ enabled: z.boolean() }),\n  }),\n});\n\nexport const organizationSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  plan: z.string().optional(),\n  allowed_release_channels: z.array(z.string()),\n  opt_in_tags: z.array(z.string()),\n});\n\nexport const projectSchema = z.object({\n  id: z.string(),\n  organization_id: z.string(),\n  name: z.string(),\n  status: z.string(),\n  created_at: z.string(),\n  region: z.string(),\n});\n\nexport const branchSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  project_ref: z.string(),\n  parent_project_ref: z.string(),\n  is_default: z.boolean(),\n  git_branch: z.string().optional(),\n  pr_number: z.number().optional(),\n  latest_check_run_id: z.number().optional(),\n  persistent: z.boolean(),\n  status: z.enum([\n    'CREATING_PROJECT',\n    'RUNNING_MIGRATIONS',\n    'MIGRATIONS_PASSED',\n    'MIGRATIONS_FAILED',\n    'FUNCTIONS_DEPLOYED',\n    'FUNCTIONS_FAILED',\n  ]),\n  created_at: z.string(),\n  updated_at: z.string(),\n});\n\nexport const edgeFunctionSchema = z.object({\n  id: z.string(),\n  slug: z.string(),\n  name: z.string(),\n  status: z.string(),\n  version: z.number(),\n  created_at: z.number().optional(),\n  updated_at: z.number().optional(),\n  verify_jwt: z.boolean().optional(),\n  import_map: z.boolean().optional(),\n  import_map_path: z.string().optional(),\n  entrypoint_path: z.string().optional(),\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n});\n\nexport const createProjectOptionsSchema = z.object({\n  name: z.string(),\n  organization_id: z.string(),\n  region: z.enum(AWS_REGION_CODES),\n  db_pass: z.string().optional(),\n});\n\nexport const createBranchOptionsSchema = z.object({\n  name: z.string(),\n});\n\nexport const resetBranchOptionsSchema = z.object({\n  migration_version: z.string().optional(),\n});\n\nexport const deployEdgeFunctionOptionsSchema = z.object({\n  name: z.string(),\n  entrypoint_path: z.string(),\n  import_map_path: z.string().optional(),\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n});\n\nexport const executeSqlOptionsSchema = z.object({\n  query: z.string(),\n  read_only: z.boolean().optional(),\n});\n\nexport const applyMigrationOptionsSchema = z.object({\n  name: z.string(),\n  query: z.string(),\n});\n\nexport const migrationSchema = z.object({\n  version: z.string(),\n  name: z.string().optional(),\n});\n\nexport const getLogsOptionsSchema = z.object({\n  sql: z.string(),\n  iso_timestamp_start: z.string().optional(),\n  iso_timestamp_end: z.string().optional(),\n});\n\nexport const generateTypescriptTypesResultSchema = z.object({\n  types: z.string(),\n});\n\nexport type Organization = z.infer<typeof organizationSchema>;\nexport type Project = z.infer<typeof projectSchema>;\nexport type Branch = z.infer<typeof branchSchema>;\nexport type EdgeFunction = z.infer<typeof edgeFunctionSchema>;\n\nexport type CreateProjectOptions = z.infer<typeof createProjectOptionsSchema>;\nexport type CreateBranchOptions = z.infer<typeof createBranchOptionsSchema>;\nexport type ResetBranchOptions = z.infer<typeof resetBranchOptionsSchema>;\nexport type DeployEdgeFunctionOptions = z.infer<\n  typeof deployEdgeFunctionOptionsSchema\n>;\n\nexport type ExecuteSqlOptions = z.infer<typeof executeSqlOptionsSchema>;\nexport type ApplyMigrationOptions = z.infer<typeof applyMigrationOptionsSchema>;\nexport type Migration = z.infer<typeof migrationSchema>;\nexport type ListMigrationsResult = z.infer<typeof migrationSchema>;\n\nexport type GetLogsOptions = z.infer<typeof getLogsOptionsSchema>;\nexport type GenerateTypescriptTypesResult = z.infer<\n  typeof generateTypescriptTypesResultSchema\n>;\n\nexport type StorageConfig = z.infer<typeof storageConfigSchema>;\nexport type StorageBucket = z.infer<typeof storageBucketSchema>;\n\nexport type DatabaseOperations = {\n  executeSql<T>(projectId: string, options: ExecuteSqlOptions): Promise<T[]>;\n  listMigrations(projectId: string): Promise<Migration[]>;\n  applyMigration(\n    projectId: string,\n    options: ApplyMigrationOptions\n  ): Promise<void>;\n};\n\nexport type AccountOperations = {\n  listOrganizations(): Promise<Pick<Organization, 'id' | 'name'>[]>;\n  getOrganization(organizationId: string): Promise<Organization>;\n  listProjects(): Promise<Project[]>;\n  getProject(projectId: string): Promise<Project>;\n  createProject(options: CreateProjectOptions): Promise<Project>;\n  pauseProject(projectId: string): Promise<void>;\n  restoreProject(projectId: string): Promise<void>;\n};\n\nexport type EdgeFunctionsOperations = {\n  listEdgeFunctions(projectId: string): Promise<EdgeFunction[]>;\n  getEdgeFunction(\n    projectId: string,\n    functionSlug: string\n  ): Promise<EdgeFunction>;\n  deployEdgeFunction(\n    projectId: string,\n    options: DeployEdgeFunctionOptions\n  ): Promise<Omit<EdgeFunction, 'files'>>;\n};\n\nexport type DebuggingOperations = {\n  getLogs(projectId: string, options: GetLogsOptions): Promise<unknown>;\n  getSecurityAdvisors(projectId: string): Promise<unknown>;\n  getPerformanceAdvisors(projectId: string): Promise<unknown>;\n};\n\nexport type DevelopmentOperations = {\n  getProjectUrl(projectId: string): Promise<string>;\n  getAnonKey(projectId: string): Promise<string>;\n  generateTypescriptTypes(\n    projectId: string\n  ): Promise<GenerateTypescriptTypesResult>;\n};\n\nexport type StorageOperations = {\n  getStorageConfig(projectId: string): Promise<StorageConfig>;\n  updateStorageConfig(projectId: string, config: StorageConfig): Promise<void>;\n  listAllBuckets(projectId: string): Promise<StorageBucket[]>;\n};\n\nexport type BranchingOperations = {\n  listBranches(projectId: string): Promise<Branch[]>;\n  createBranch(\n    projectId: string,\n    options: CreateBranchOptions\n  ): Promise<Branch>;\n  deleteBranch(branchId: string): Promise<void>;\n  mergeBranch(branchId: string): Promise<void>;\n  resetBranch(branchId: string, options: ResetBranchOptions): Promise<void>;\n  rebaseBranch(branchId: string): Promise<void>;\n};\n\nexport type SupabasePlatform = {\n  init?(info: InitData): Promise<void>;\n  account?: AccountOperations;\n  database?: DatabaseOperations;\n  functions?: EdgeFunctionsOperations;\n  debugging?: DebuggingOperations;\n  development?: DevelopmentOperations;\n  storage?: StorageOperations;\n  branching?: BranchingOperations;\n};\n"]}