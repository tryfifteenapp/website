{"version":3,"sources":["../src/platform/types.ts"],"sourcesContent":["import type { InitData } from '@supabase/mcp-utils';\nimport { z } from 'zod';\nimport { AWS_REGION_CODES } from '../regions.js';\n\nexport const storageBucketSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  owner: z.string(),\n  created_at: z.string(),\n  updated_at: z.string(),\n  public: z.boolean(),\n});\n\nexport const storageConfigSchema = z.object({\n  fileSizeLimit: z.number(),\n  features: z.object({\n    imageTransformation: z.object({ enabled: z.boolean() }),\n    s3Protocol: z.object({ enabled: z.boolean() }),\n  }),\n});\n\nexport const organizationSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  plan: z.string().optional(),\n  allowed_release_channels: z.array(z.string()),\n  opt_in_tags: z.array(z.string()),\n});\n\nexport const projectSchema = z.object({\n  id: z.string(),\n  organization_id: z.string(),\n  name: z.string(),\n  status: z.string(),\n  created_at: z.string(),\n  region: z.string(),\n});\n\nexport const branchSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  project_ref: z.string(),\n  parent_project_ref: z.string(),\n  is_default: z.boolean(),\n  git_branch: z.string().optional(),\n  pr_number: z.number().optional(),\n  latest_check_run_id: z.number().optional(),\n  persistent: z.boolean(),\n  status: z.enum([\n    'CREATING_PROJECT',\n    'RUNNING_MIGRATIONS',\n    'MIGRATIONS_PASSED',\n    'MIGRATIONS_FAILED',\n    'FUNCTIONS_DEPLOYED',\n    'FUNCTIONS_FAILED',\n  ]),\n  created_at: z.string(),\n  updated_at: z.string(),\n});\n\nexport const edgeFunctionSchema = z.object({\n  id: z.string(),\n  slug: z.string(),\n  name: z.string(),\n  status: z.string(),\n  version: z.number(),\n  created_at: z.number().optional(),\n  updated_at: z.number().optional(),\n  verify_jwt: z.boolean().optional(),\n  import_map: z.boolean().optional(),\n  import_map_path: z.string().optional(),\n  entrypoint_path: z.string().optional(),\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n});\n\nexport const createProjectOptionsSchema = z.object({\n  name: z.string(),\n  organization_id: z.string(),\n  region: z.enum(AWS_REGION_CODES),\n  db_pass: z.string().optional(),\n});\n\nexport const createBranchOptionsSchema = z.object({\n  name: z.string(),\n});\n\nexport const resetBranchOptionsSchema = z.object({\n  migration_version: z.string().optional(),\n});\n\nexport const deployEdgeFunctionOptionsSchema = z.object({\n  name: z.string(),\n  entrypoint_path: z.string(),\n  import_map_path: z.string().optional(),\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n});\n\nexport const executeSqlOptionsSchema = z.object({\n  query: z.string(),\n  read_only: z.boolean().optional(),\n});\n\nexport const applyMigrationOptionsSchema = z.object({\n  name: z.string(),\n  query: z.string(),\n});\n\nexport const migrationSchema = z.object({\n  version: z.string(),\n  name: z.string().optional(),\n});\n\nexport const getLogsOptionsSchema = z.object({\n  sql: z.string(),\n  iso_timestamp_start: z.string().optional(),\n  iso_timestamp_end: z.string().optional(),\n});\n\nexport const generateTypescriptTypesResultSchema = z.object({\n  types: z.string(),\n});\n\nexport type Organization = z.infer<typeof organizationSchema>;\nexport type Project = z.infer<typeof projectSchema>;\nexport type Branch = z.infer<typeof branchSchema>;\nexport type EdgeFunction = z.infer<typeof edgeFunctionSchema>;\n\nexport type CreateProjectOptions = z.infer<typeof createProjectOptionsSchema>;\nexport type CreateBranchOptions = z.infer<typeof createBranchOptionsSchema>;\nexport type ResetBranchOptions = z.infer<typeof resetBranchOptionsSchema>;\nexport type DeployEdgeFunctionOptions = z.infer<\n  typeof deployEdgeFunctionOptionsSchema\n>;\n\nexport type ExecuteSqlOptions = z.infer<typeof executeSqlOptionsSchema>;\nexport type ApplyMigrationOptions = z.infer<typeof applyMigrationOptionsSchema>;\nexport type Migration = z.infer<typeof migrationSchema>;\nexport type ListMigrationsResult = z.infer<typeof migrationSchema>;\n\nexport type GetLogsOptions = z.infer<typeof getLogsOptionsSchema>;\nexport type GenerateTypescriptTypesResult = z.infer<\n  typeof generateTypescriptTypesResultSchema\n>;\n\nexport type StorageConfig = z.infer<typeof storageConfigSchema>;\nexport type StorageBucket = z.infer<typeof storageBucketSchema>;\n\nexport type DatabaseOperations = {\n  executeSql<T>(projectId: string, options: ExecuteSqlOptions): Promise<T[]>;\n  listMigrations(projectId: string): Promise<Migration[]>;\n  applyMigration(\n    projectId: string,\n    options: ApplyMigrationOptions\n  ): Promise<void>;\n};\n\nexport type AccountOperations = {\n  listOrganizations(): Promise<Pick<Organization, 'id' | 'name'>[]>;\n  getOrganization(organizationId: string): Promise<Organization>;\n  listProjects(): Promise<Project[]>;\n  getProject(projectId: string): Promise<Project>;\n  createProject(options: CreateProjectOptions): Promise<Project>;\n  pauseProject(projectId: string): Promise<void>;\n  restoreProject(projectId: string): Promise<void>;\n};\n\nexport type EdgeFunctionsOperations = {\n  listEdgeFunctions(projectId: string): Promise<EdgeFunction[]>;\n  getEdgeFunction(\n    projectId: string,\n    functionSlug: string\n  ): Promise<EdgeFunction>;\n  deployEdgeFunction(\n    projectId: string,\n    options: DeployEdgeFunctionOptions\n  ): Promise<Omit<EdgeFunction, 'files'>>;\n};\n\nexport type DebuggingOperations = {\n  getLogs(projectId: string, options: GetLogsOptions): Promise<unknown>;\n  getSecurityAdvisors(projectId: string): Promise<unknown>;\n  getPerformanceAdvisors(projectId: string): Promise<unknown>;\n};\n\nexport type DevelopmentOperations = {\n  getProjectUrl(projectId: string): Promise<string>;\n  getAnonKey(projectId: string): Promise<string>;\n  generateTypescriptTypes(\n    projectId: string\n  ): Promise<GenerateTypescriptTypesResult>;\n};\n\nexport type StorageOperations = {\n  getStorageConfig(projectId: string): Promise<StorageConfig>;\n  updateStorageConfig(projectId: string, config: StorageConfig): Promise<void>;\n  listAllBuckets(projectId: string): Promise<StorageBucket[]>;\n};\n\nexport type BranchingOperations = {\n  listBranches(projectId: string): Promise<Branch[]>;\n  createBranch(\n    projectId: string,\n    options: CreateBranchOptions\n  ): Promise<Branch>;\n  deleteBranch(branchId: string): Promise<void>;\n  mergeBranch(branchId: string): Promise<void>;\n  resetBranch(branchId: string, options: ResetBranchOptions): Promise<void>;\n  rebaseBranch(branchId: string): Promise<void>;\n};\n\nexport type SupabasePlatform = {\n  init?(info: InitData): Promise<void>;\n  account?: AccountOperations;\n  database?: DatabaseOperations;\n  functions?: EdgeFunctionsOperations;\n  debugging?: DebuggingOperations;\n  development?: DevelopmentOperations;\n  storage?: StorageOperations;\n  branching?: BranchingOperations;\n};\n"],"mappings":"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","names":["z","storageBucketSchema","z","storageConfigSchema","organizationSchema","projectSchema","branchSchema","edgeFunctionSchema","createProjectOptionsSchema","AWS_REGION_CODES","createBranchOptionsSchema","resetBranchOptionsSchema","deployEdgeFunctionOptionsSchema","executeSqlOptionsSchema","applyMigrationOptionsSchema","migrationSchema","getLogsOptionsSchema","generateTypescriptTypesResultSchema"]}